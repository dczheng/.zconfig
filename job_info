#!/usr/bin/env python3
import os
import sys
import argparse
import time

def job_info(sl):
    log = os.popen( 'top -Hb -n1 -w 256' ).readlines()
    users = os.popen( 'ls /home' ).readlines()
    log = log[7:]
    print( '-'*sl )
    print( '^_^ job information ^_^' )
    print( '-'*sl )
    used_cpu = 0
    used_mem = 0
    job_info = "%10s%-5s%-10s%-8s%-6s%-15s%-s"%( "user  ", "num", "cpu", \
                                             "mem(Gb)", "mcpu", "mpro", "program" )
    print( job_info )
    for u in users:
        uu = u[:-1]
        job = []
        cpu = 0
        mcpu = 150
        mem = 0
        for l in log:
            ll = l.split()
            if 'top' in ll[-1]:
                continue
            if uu == ll[1] and ll[7] == 'R' :
                job.append( ll[-1] )
                x = float(ll[8]);
                if ( x < mcpu ):
                    mcpu = x
                    mpro = ll[-1] + " "
                cpu += x
                x = ll[5]
                if ( x[-1] == 't'):
                    x = float(x[:-1]) * 1024 * 1024 * 1024
                elif ( x[-1] == 'g'):
                    x = float(x[:-1]) * 1024 * 1024
                elif ( x[-1] == 'm' ):
                    x = float(x[:-1]) * 1024
                else:
                    x = float( x )
                mem += x / 1024 / 1024
        used_mem += mem
        m = []
        if job != [] :
            n = len( job )
            used_cpu += n
            for i in job:
                if not( i in m ):
                    m.append(i)
                    job_info = "%10s%-5d"%( uu + '  ' , n )
            job_info += "%-10.1f"%( cpu )
            job_info += "%-8.1f"%( mem )
            job_info += "%-6.1f"%( mcpu )
            job_info += "%-15s"%( mpro[0:15] )
            job_info = job_info + "|"
            for i in m:
                job_info = job_info + "%s|"%(i)
            print( job_info )
    print( '-'*sl )

    other_info = ''
    '''
    uu = 'root'
    job = []
    for l in log:
        ll = l.split()
        if uu == ll[1] and ll[7] == 'R':
            job.append( ll[-1] )
    n = len( job )
    used_cpu += n
    other_info += "root: %d\n"%( n )
    '''

    log = os.popen( 'free' ).readlines()
    for l in log:
        if "Mem:" in l:
            t = l.split()
            tot_mem = int( t[1] ) / 1024 / 1024
            #used_mem = int( t[2] ) / 1024 / 1024
            #free_mem = int( t[3] ) / 1024 / 1024
            cached_mem = int( t[6] ) / 1024 / 1024
    ncpu = os.popen( 'cat /proc/cpuinfo | grep "physical id" | uniq | wc -l ' ).readlines()
    ncpu = int( ncpu[0] )
    nc = os.popen( 'cat /proc/cpuinfo | grep "cpu core"' ).readlines()
    nc = nc[0].split()
    nc = int(nc[3])
    #print( ncpu, nc )
    tot_cpu = ncpu * nc
    other_info += "cpu: tot %d | used %d | left %d\n"  %( tot_cpu, used_cpu, tot_cpu-used_cpu )
    other_info += "mem(Gb): tot %.1f | used %.1f | left %.1f | cached %.1f" \
        %(tot_mem, used_mem, tot_mem-used_mem, cached_mem )
    print( other_info )


def job_info_slurm(sl):
    print( '-'*sl )
    log = os.popen( 'squeue -o %10i%10u%15j%14M%4t%4C' ).readlines()
    tot_cpu = 0
    for i in range( 1, len(log) ):
        t = log[i].split()
        tot_cpu += int( t[-1] )
    print( '^o^ slurm information ^o^     ** used: %i left: %i **'%(tot_cpu, 256-tot_cpu) )
    print( '-'*sl )
    for l in log:
        print( l[:-1] )

def main():
    N = 1
    t = 5
    sl = 70
    parser = argparse.ArgumentParser()
    parser.add_argument( "-n", type=int, help="run times" )
    parser.add_argument( "-t", type=int, help="sleep time" )
    parser.add_argument( "-sl", type=int, help="split line length" )
    parser.add_argument( "-ns", help="close slurm info", action="store_true" )
    parser.add_argument( "-ncow", help="close cowsay", action="store_true" )
    parser.add_argument( "-ncls", help="close cls", action="store_true" )
    args = parser.parse_args()

    if args.n:
        N = args.n
    if args.t:
        t = args.t
    if args.sl:
        sl = args.sl
    slurm_flag = not( args.ns )

    user_info_path = os.path.realpath( sys.argv[0] )
    user_info_dir = os.path.dirname( user_info_path )
    cowsay_path = user_info_dir + '/' + 'cowsay.py'

    for i in range( N ):
        if not(args.ncls):
            os.system( 'clear' )
        job_info(sl)
        if slurm_flag:
            job_info_slurm(sl)
        print( "*" * sl )
        if not(args.ncow):
            os.system( cowsay_path )
        if N != 1:
            time.sleep( t )

if __name__ == '__main__':
    main()

